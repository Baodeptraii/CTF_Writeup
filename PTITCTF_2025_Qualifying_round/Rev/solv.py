from struct import unpack, pack

# S-box byte_4120F0
SBOX = [
    0x63,
    0x7C,
    0x77,
    0x7B,
    0xF2,
    0x6B,
    0x6F,
    0xC5,
    0x30,
    0x01,
    0x67,
    0x2B,
    0xFE,
    0xD7,
    0xAB,
    0x76,
    0xCA,
    0x82,
    0xC9,
    0x7D,
    0xFA,
    0x59,
    0x47,
    0xF0,
    0xAD,
    0xD4,
    0xA2,
    0xAF,
    0x9C,
    0xA4,
    0x72,
    0xC0,
    0xB7,
    0xFD,
    0x93,
    0x26,
    0x36,
    0x3F,
    0xF7,
    0xCC,
    0x34,
    0xA5,
    0xE5,
    0xF1,
    0x71,
    0xD8,
    0x31,
    0x15,
    0x04,
    0xC7,
    0x23,
    0xC3,
    0x18,
    0x96,
    0x05,
    0x9A,
    0x07,
    0x12,
    0x80,
    0xE2,
    0xEB,
    0x27,
    0xB2,
    0x75,
    0x09,
    0x83,
    0x2C,
    0x1A,
    0x1B,
    0x6E,
    0x5A,
    0xA0,
    0x52,
    0x3B,
    0xD6,
    0xB3,
    0x29,
    0xE3,
    0x2F,
    0x84,
    0x53,
    0xD1,
    0x00,
    0xED,
    0x20,
    0xFC,
    0xB1,
    0x5B,
    0x6A,
    0xCB,
    0xBE,
    0x39,
    0x4A,
    0x4C,
    0x58,
    0xCF,
    0xD0,
    0xEF,
    0xAA,
    0xFB,
    0x43,
    0x4D,
    0x33,
    0x85,
    0x45,
    0xF9,
    0x02,
    0x7F,
    0x50,
    0x3C,
    0x9F,
    0xA8,
    0x51,
    0xA3,
    0x40,
    0x8F,
    0x92,
    0x9D,
    0x38,
    0xF5,
    0xBC,
    0xB6,
    0xDA,
    0x21,
    0x10,
    0xFF,
    0xF3,
    0xD2,
    0xCD,
    0x0C,
    0x13,
    0xEC,
    0x5F,
    0x97,
    0x44,
    0x17,
    0xC4,
    0xA7,
    0x7E,
    0x3D,
    0x64,
    0x5D,
    0x19,
    0x73,
    0x60,
    0x81,
    0x4F,
    0xDC,
    0x22,
    0x2A,
    0x90,
    0x88,
    0x46,
    0xEE,
    0xB8,
    0x14,
    0xDE,
    0x5E,
    0x0B,
    0xDB,
    0xE0,
    0x32,
    0x3A,
    0x0A,
    0x49,
    0x06,
    0x24,
    0x5C,
    0xC2,
    0xD3,
    0xAC,
    0x62,
    0x91,
    0x95,
    0xE4,
    0x79,
    0xE7,
    0xC8,
    0x37,
    0x6D,
    0x8D,
    0xD5,
    0x4E,
    0xA9,
    0x6C,
    0x56,
    0xF4,
    0xEA,
    0x65,
    0x7A,
    0xAE,
    0x08,
    0xBA,
    0x78,
    0x25,
    0x2E,
    0x1C,
    0xA6,
    0xB4,
    0xC6,
    0xE8,
    0xDD,
    0x74,
    0x1F,
    0x4B,
    0xBD,
    0x8B,
    0x8A,
    0x70,
    0x3E,
    0xB5,
    0x66,
    0x48,
    0x03,
    0xF6,
    0x0E,
    0x61,
    0x35,
    0x57,
    0xB9,
    0x86,
    0xC1,
    0x1D,
    0x9E,
    0xE1,
    0xF8,
    0x98,
    0x11,
    0x69,
    0xD9,
    0x8E,
    0x94,
    0x9B,
    0x1E,
    0x87,
    0xE9,
    0xCE,
    0x55,
    0x28,
    0xDF,
    0x8C,
    0xA1,
    0x89,
    0x0D,
    0xBF,
    0xE6,
    0x42,
    0x68,
    0x41,
    0x99,
    0x2D,
    0x0F,
    0xB0,
    0x54,
    0xBB,
    0x16,
]


def rol32(x, r):
    x &= 0xFFFFFFFF
    return ((x << r) & 0xFFFFFFFF) | (x >> (32 - r))


def generate_round_keys(key_words):  # key_words: 4 x 32-bit (little-endian)
    a2 = [0] * 8
    v2 = key_words[3]
    v3 = key_words[0] ^ rol32(v2, 0xB)
    v4 = (v3 + key_words[1]) & 0xFFFFFFFF
    v5 = (v4 ^ key_words[2]) & 0xFFFFFFFF
    v6 = (v2 + (v5 ^ 0x63)) & 0xFFFFFFFF
    a2[0] = v3 & 0xFFFFFFFF
    v7 = (v3 ^ rol32(v6, 0xB)) & 0xFFFFFFFF
    v8 = (v7 + v4) & 0xFFFFFFFF
    v9 = (v8 ^ v5) & 0xFFFFFFFF
    v10 = (v6 + (v9 ^ 0x1F)) & 0xFFFFFFFF
    a2[1] = v8
    v11 = (v7 ^ rol32(v10, 0xB)) & 0xFFFFFFFF
    v12 = (v11 + v8) & 0xFFFFFFFF
    v13 = (v12 ^ v9) & 0xFFFFFFFF
    v14 = ((v13 ^ 0x68) + v10) & 0xFFFFFFFF
    a2[2] = (v13 ^ 0x68) & 0xFFFFFFFF
    v15 = (v11 ^ rol32(v14, 0xB)) & 0xFFFFFFFF
    v16 = (v15 + v12) & 0xFFFFFFFF
    v17 = (v16 ^ v13) & 0xFFFFFFFF
    v18 = (v14 + (v17 ^ 0x13)) & 0xFFFFFFFF
    a2[3] = v18
    v19 = (v15 ^ rol32(v18, 0xB)) & 0xFFFFFFFF
    v20 = (v19 + v16) & 0xFFFFFFFF
    v21 = (v20 ^ v17) & 0xFFFFFFFF
    v22 = (v18 + (v21 ^ 0xE1)) & 0xFFFFFFFF
    a2[4] = v19
    v23 = (v19 ^ rol32(v22, 0xB)) & 0xFFFFFFFF
    v24 = (v23 + v20) & 0xFFFFFFFF
    v25 = (v24 ^ v21) & 0xFFFFFFFF
    v26 = (v22 + (v25 ^ 0x8A)) & 0xFFFFFFFF
    a2[5] = v24
    v27 = (v23 ^ rol32(v26, 0xB)) & 0xFFFFFFFF
    result = (v27 + v24) & 0xFFFFFFFF
    v29 = (result ^ v25) & 0xFFFFFFFF
    a2[6] = (v29 ^ 0xE5) & 0xFFFFFFFF
    a2[7] = (
        a2[6]
        + v26
        + (
            (
                v29
                ^ (
                    (result + (v27 ^ rol32((a2[6] + v26) & 0xFFFFFFFF, 0xB)))
                    & 0xFFFFFFFF
                )
            )
            ^ 0x20
        )
    ) & 0xFFFFFFFF
    return a2


def F_function(a1, a2):
    t = (a2 ^ a1) & 0xFFFFFFFF
    b0 = SBOX[(t >> 24) & 0xFF] << 24
    b1 = SBOX[(t >> 16) & 0xFF] << 16
    b2 = SBOX[t & 0xFF]
    b3 = SBOX[(t >> 8) & 0xFF] << 8
    val = (b0 | b1 | b2 | b3) & 0xFFFFFFFF
    return (rol32(val, 0xD) - 0x61C88647) & 0xFFFFFFFF


def decrypt_block(block8, rk):
    # Ciphertext layout sau encrypt:
    # C = (L7, R7 ^ F(L7, rk[7]))  (không swap ở round cuối)
    L7, C1 = unpack("<II", block8)
    R7 = (C1 ^ F_function(L7, rk[7])) & 0xFFFFFFFF
    L, R = L7, R7
    # Đi ngược i = 6 .. 0:
    # Li = Ri+1
    # Ri = Li+1 ^ F(Li, rk[i])
    for i in range(6, -1, -1):
        Li = R
        Ri = (L ^ F_function(Li, rk[i])) & 0xFFFFFFFF
        L, R = Li, Ri
    return pack("<II", L, R)


# Dữ liệu
enc_flag = bytes(
    [
        0x40,
        0x32,
        0xC4,
        0xDA,
        0x67,
        0xA9,
        0x1C,
        0x97,
        0x69,
        0xA1,
        0xD8,
        0xBE,
        0x1F,
        0xEE,
        0xE9,
        0xA1,
        0xF5,
        0x28,
        0x54,
        0x09,
        0x55,
        0x5D,
        0xC5,
        0x7D,
        0xCD,
        0x26,
        0x6B,
        0x36,
        0x22,
        0x15,
        0x0C,
        0xE2,
        0x5E,
        0x5E,
        0xBE,
        0xA5,
        0xFF,
        0x4A,
        0x24,
        0x34,
        0x05,
        0xF5,
        0x7D,
        0xDD,
        0xBA,
        0x9F,
        0x62,
        0xEB,
    ]
)

# Key: chỉ 16 byte đầu được dùng cho generate_round_keys (little-endian 4 x 32-bit)
key_bytes = b"Th1s_1s_A_V3ry_S3cr3t_K3y_F0r_CTF!"
key_words = list(unpack("<4I", key_bytes[:16]))
rk = generate_round_keys(key_words)

# Giải mã từng block 8 byte
pt = b"".join(
    decrypt_block(enc_flag[i : i + 8], rk) for i in range(0, len(enc_flag), 8)
)

# Bỏ padding theo kiểu PKCS#7 (giá trị mỗi byte = số byte padding)
pad = pt[-1]
if 1 <= pad <= 8 and pt.endswith(bytes([pad]) * pad):
    pt = pt[:-pad]

print(pt.decode(errors="replace"))
